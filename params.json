{"name":"Jwt-auth-guard","tagline":"JWT Auth Guard for Laravel and Lumen Frameworks.","body":"# JWT Auth Guard\r\n\r\n[![Latest Version on Packagist][ico-version]][link-packagist]\r\n[![Software License][ico-license]](LICENSE.md)\r\n[![Total Downloads][ico-downloads]][link-downloads]\r\n\r\n> JWT Auth Guard is a Laravel & Lumen Package that lets you use `jwt` as your driver for authentication guard in your application.\r\n> \r\n> The Guard uses `tymon/jwt-auth` package for authentication and token handling.\r\n\r\n## Requirements\r\n- Laravel or Lumen Installation.\r\n- [tymon/jwt-auth](https://github.com/tymondesigns/jwt-auth) Package Setup and Config'd.\r\n\r\n## Install\r\n\r\nVia Composer\r\n\r\n``` bash\r\n$ composer require irazasyed/jwt-auth-guard\r\n```\r\n\r\n### Add the Service Provider\r\n\r\n#### Laravel\r\n\r\nOpen `config/app.php` and, to your `providers` array at the bottom, add:\r\n\r\n```php\r\nIrazasyed\\JwtAuthGuard\\JwtAuthGuardServiceProvider::class\r\n```\r\n\r\n#### Lumen\r\n\r\nOpen `bootstrap/app.php` and register the service provider:\r\n\r\n``` php\r\n$app->register(Irazasyed\\JwtAuthGuard\\JwtAuthGuardServiceProvider::class);\r\n```\r\n\r\n## Usage\r\n\r\nOpen your `config/auth.php` config file and in place of driver under any of your guards, just add the `jwt` as your driver and you're all set.\r\nMake sure you also set `provider` for the guard to communicate with your database.\r\n\r\n### Setup Guard Driver\r\n\r\n``` php\r\n// config/auth.php\r\n'guards' => [\r\n    'api' => [\r\n        'driver' => 'jwt',\r\n        'provider' => 'users'\r\n    ],\r\n    \r\n    // ...\r\n],\r\n\r\n'providers' => [\r\n    'users' => [\r\n        'driver' => 'eloquent',\r\n        'model'  => App\\User::class,\r\n    ],\r\n],\r\n```\r\n\r\n### Middleware Usage\r\n\r\nMiddleware protecting the route:\r\n\r\n``` php\r\nRoute::get('api/content', ['middleware' => 'auth:api', 'uses' => 'ContentController@content']);\r\n```\r\n\r\nMiddleware protecting the controller:\r\n\r\n``` php\r\n<?php\r\n\r\nnamespace App\\Http\\Controllers;\r\n\r\nclass ContentController extends Controller\r\n{\r\n    public function __construct() \r\n    {\r\n        $this->middleware('auth:api');\r\n    }\r\n}\r\n```\r\n\r\n**Note:** The above example assumes you've setup a guard with the name `api` whose driver is `jwt` in your `config/auth.php` file as explained in \"Setup Guard Driver\" section above.\r\n\r\n> The following usage examples assume you've setup your default auth guard to the one which uses the `jwt` driver.\r\n>\r\n> You can also explicitly define the guard before making calls to any of methods by just prefixing it with `Auth::guard('api')`. \r\n>\r\n> Example: `Auth::guard('api')->user()`\r\n\r\n### Attempt To Authenticate And Return Token\r\n\r\n``` php\r\n// This will attempt to authenticate the user using the credentials passed and returns a JWT Auth Token for subsequent requests.\r\n$token = Auth::attempt(['email' => 'user@domain.com', 'password' => '123456']);\r\n```\r\n\r\n### Authenticate Once By ID\r\n\r\n``` php\r\nif(Auth::onceUsingId(1)) {\r\n    // Do something with the authenticated user\r\n}\r\n```\r\n\r\n### Authenticate Once By Credentials\r\n\r\n``` php\r\nif(Auth::once(['email' => 'user@domain.com', 'password' => '123456'])) {\r\n    // Do something with the authenticated user\r\n}\r\n```\r\n\r\n### Validate Credentials\r\n\r\n``` php\r\nif(Auth::validate(['email' => 'user@domain.com', 'password' => '123456'])) {\r\n    // Credentials are valid\r\n}\r\n```\r\n\r\n### Check User is Authenticated\r\n\r\n``` php\r\nif(Auth::check()) {\r\n    // User is authenticated\r\n}\r\n```\r\n\r\n### Check User is a Guest\r\n\r\n``` php\r\nif(Auth::guest()) {\r\n    // Welcome guests!\r\n}\r\n```\r\n\r\n### Logout Authenticated User\r\n\r\n``` php\r\nAuth::logout(); // This will invalidate the current token and unset user/token values.\r\n```\r\n\r\n### Generate JWT Auth Token By ID\r\n   \r\n``` php\r\n$token = Auth::generateTokenById(1);\r\n\r\necho $token;\r\n```\r\n\r\n### Get Authenticated User\r\n\r\nOnce the user is authenticated via a middleware, You can access its details by doing:\r\n\r\n``` php\r\n$user = Auth::user();\r\n```\r\n\r\nYou can also manually access user info using the token itself:\r\n\r\n``` php\r\n$user = Auth::setToken('YourJWTAuthToken')->user();\r\n```\r\n\r\n### Get Authenticated User's ID\r\n\r\n``` php\r\n$userId = Auth::id();\r\n```\r\n\r\n### Refresh Expired Token\r\n\r\nThough it's recommended you refresh using the middlewares provided with the package,\r\nbut if you'd like, You can also do it manually with this method.\r\n\r\nRefresh expired token passed in request:\r\n\r\n``` php\r\n$token = Auth::refresh();\r\n```\r\n\r\nRefresh passed expired token:\r\n\r\n``` php\r\nAuth::setToken('ExpiredToken')->refresh();\r\n```\r\n\r\n### Invalidate Token\r\n\r\nInvalidate token passed in request:\r\n\r\n``` php\r\n$forceForever = false;\r\nAuth::invalidate($forceForever);\r\n```\r\n\r\nInvalidate token by setting one manually:\r\n\r\n``` php\r\n$forceForever = false;\r\nAuth::setToken('TokenToInvalidate')->invalidate($forceForever);\r\n```\r\n\r\n### Get Token\r\n\r\n``` php\r\n$token = Auth::getToken(); // Returns current token passed in request.\r\n```\r\n\r\n### Get Token Payload\r\n\r\nThis method will decode the token and return its raw payload.\r\n\r\nGet Payload for the token passed in request:\r\n\r\n``` php\r\n$payload = Auth::getPayload();\r\n```\r\n\r\nGet Payload for the given token manually:\r\n\r\n``` php\r\n$payload = Auth::setToken('TokenToGetPayload')->getPayload();\r\n```\r\n\r\n## Change log\r\n\r\nPlease see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.\r\n\r\n## Testing\r\n\r\n``` bash\r\n$ composer test\r\n```\r\n\r\n## Contributing\r\n\r\nPlease see [CONTRIBUTING](CONTRIBUTING.md) and [CONDUCT](CONDUCT.md) for details.\r\n\r\nAny issues, feedback, suggestions or questions please use issue tracker [here](https://github.com/irazasyed/jwt-auth-guard/issues).\r\n\r\n## Security\r\n\r\nIf you discover any security related issues, please email syed+gh@lukonet.com instead of using the issue tracker.\r\n\r\n## Credits\r\n\r\n- [Syed Irfaq R.][link-author]\r\n- [All Contributors][link-contributors]\r\n\r\n\r\n## License\r\n\r\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\r\n\r\n[ico-version]: https://img.shields.io/packagist/v/irazasyed/jwt-auth-guard.svg?style=flat-square\r\n[ico-license]: https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square\r\n[ico-travis]: https://img.shields.io/travis/irazasyed/jwt-auth-guard/master.svg?style=flat-square\r\n[ico-scrutinizer]: https://img.shields.io/scrutinizer/coverage/g/irazasyed/jwt-auth-guard.svg?style=flat-square\r\n[ico-code-quality]: https://img.shields.io/scrutinizer/g/irazasyed/jwt-auth-guard.svg?style=flat-square\r\n[ico-downloads]: https://img.shields.io/packagist/dt/irazasyed/jwt-auth-guard.svg?style=flat-square\r\n\r\n[link-packagist]: https://packagist.org/packages/irazasyed/jwt-auth-guard\r\n[link-travis]: https://travis-ci.org/irazasyed/jwt-auth-guard\r\n[link-scrutinizer]: https://scrutinizer-ci.com/g/irazasyed/jwt-auth-guard/code-structure\r\n[link-code-quality]: https://scrutinizer-ci.com/g/irazasyed/jwt-auth-guard\r\n[link-downloads]: https://packagist.org/packages/irazasyed/jwt-auth-guard\r\n[link-author]: https://github.com/irazasyed\r\n[link-contributors]: ../../contributors\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}